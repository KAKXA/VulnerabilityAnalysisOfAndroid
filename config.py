import os
import re
import json
import inspect

firstCaller = inspect.stack()[-1].filename

if re.search('test', firstCaller):
    print('Using test/config.json')
    configFile = 'test\\config.json'
else:
    print('Using config.json')
    configFile = 'config.json'

with open(configFile, 'r') as fp:
    allConf = json.load(fp)

cwd = allConf['cwd']
# Scraper #########################
resourcesPath = os.path.join(cwd, allConf['scraper']['resourcesPath'])
# Scraper #########################

# Android Bulletin ##################################################
# GET Android Bulletin CVE LIST #########################
_col2MethodName = dict()
_col2MethodName['CVE']='setCveId'
_col2MethodName['REFERENCES']='setReferences'
_col2MethodName['BUG WITH AOSP LINK']='setReferences'
_col2MethodName['BUG']='setReferences'
_col2MethodName['BUGS']='setReferences'
_col2MethodName['BUG(S)']='setReferences'
_col2MethodName['BUG(S) ']='setReferences'
_col2MethodName['BUG WITH AOSP LINKS']='setReferences'
_col2MethodName['BUGS WITH AOSP LINK']='setReferences'
_col2MethodName['BUGS WITH AOSP LINKS']='setReferences'
_col2MethodName['BUG(S) WITH AOSP LINKS']='setReferences'
_col2MethodName['BUG(S) WITH AOSP LINK']='setReferences'
_col2MethodName['TYPE']='setType'
_col2MethodName['SEVERITY']='setSeverity'
_col2MethodName['UPDATED AOSP VERSIONS']='setUpdatedAospVersions'
_col2MethodName['UPDATED VERSIONS']='setUpdatedAospVersions'
_col2MethodName['AFFECTED VERSIONS']='setUpdatedAospVersions'
_col2MethodName['COMPONENT']='setComponent' 
_col2MethodName['']=''
_col2MethodName['DATE REPORTED']=''
_col2MethodName['UPDATED GOOGLE DEVICES']=''
_col2MethodName['UPDATED NEXUS DEVICES']=''
_col2MethodName['UPDATED KERNEL VERSIONS']=''
_col2MethodName['ANDROID BUGS']='setReferences'
_col2MethodName['ANDROID BUG']='setReferences'
_col2MethodName['BUGS WITH AOSP LINKS']='setReferences'
_col2MethodName['BUGS']='setReferences'
_col2MethodName['SEVERITY*'] = 'setSeverity'
_col2MethodName['ANDROID LAUNCH VERSION'] = ''
_col2MethodName['KERNEL LAUNCH VERSION'] = ''
_col2MethodName['MINIMUM LAUNCH VERSION'] = ''
_col2MethodName['CVES'] = ''
_col2MethodName['GOOGLE DEVICE'] = ''
_col2MethodName['SECURITY PATCH LEVEL'] = ''
_col2MethodName['PREFIX'] = ''
_col2MethodName['REFERENCE'] = ''
_col2MethodName['SUBCOMPONENT'] = ''

def col2MethodName(col: str) -> str:
    return _col2MethodName[col.upper()]
cveDbConf = allConf['db']
# GET CVE LIST #########################
domain = 'https://source.android.com'
androidBulletinDivClass = "devsite-article-body clearfix"

androidBulletinUrl = "https://source.android.com/security/bulletin"
androidBulletinJson = os.path.join(cwd, allConf['scraper']['androidBulletinJson'])
androidBulletinHtml = os.path.join(cwd, allConf['scraper']['androidBulletinHtml'])
androidBulletinsDirectory = os.path.join(cwd, allConf['scraper']['androidBulletinsDirectory'])
resolvedAndroidBulletinJson = os.path.join(cwd, allConf['scraper']['resolvedAndroidBulletinJson'])
androidCveJson = os.path.join(cwd, allConf['scraper']['androidCveJson'])
# Android Bulletin ##################################################

# Pixel Bulletin ################
pixelBulletinUrl = 'https://source.android.com/security/bulletin/pixel'
pixelBulletinHtml = os.path.join(cwd, allConf['scraper']['pixelBulletinHtml'])
pixelBulletinJson = os.path.join(cwd, allConf['scraper']['pixelBulletinJson'])
resolvedPixelBulletinJson  = os.path.join(cwd, allConf['scraper']['resolvedPixelBulletinJson'])
pixelBulletinsDirectory  = os.path.join(cwd, allConf['scraper']['pixelBulletinsDirectory'])
pixelCveJson = os.path.join(cwd, allConf['scraper']['pixelCveJson'])
# Pixel Bulletin ################
# Huawei Bulletin ###############
huaweiBulletinUrl = 'https://consumer.huawei.com/en/support/bulletin/'
huaweiBulletinsDirectory = os.path.join(cwd, allConf['scraper']['huaweiBulletinsDirectory'])
huaweiCveJson = os.path.join(cwd, allConf['scraper']['huaweiCveJson'])
# Huawei Bulletin ###############

# Samsung Bulletin #################
samsungBulletinUrl = 'https://security.samsungmobile.com/securityUpdate.smsb'
samsungBulletinDirectory = os.path.join(cwd, allConf['scraper']['samsungBulletinsDirectory'])
samsungCveJson = os.path.join(cwd, allConf['scraper']['samsungCveJson'])
# Samsung Bulletin #################

# CVE Details ###################
cveDetailsPageDirectory = os.path.join(cwd, allConf['scraper']['cveDetailsPageDirectory'])
cveDetailsDirectory = os.path.join(cwd, allConf['scraper']['cveDetailsDirectory'])
cveDeatilsUrlPrefix = 'https://www.cvedetails.com/vulnerability-list.php?vendor_id=1224&product_id=19997&version_id=&page='
cveDeatilsUrlSuffix = '&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=0&cvssscoremax=0&year=0&month=0&cweid=0&order=1&trc=4245&sha=1bd76566e804bd0baf4aa6ef43598ed24565b5b6'
cveDetailsDomain = 'https://www.cvedetails.com'
cveDetailsJson = os.path.join(cwd, allConf['scraper']['cveDetailsJson'])
# CVE Details ###################

# Google Source #################
googlesourceDirectory = os.path.join(cwd, allConf['scraper']['googlesourceDirectory'])
googlesourceJson = os.path.join(cwd, allConf['scraper']['googlesourceJson'])
# Google Source #################

# Analyzer ######################
metaJsons = {
    'androidCveJson': androidCveJson,
    'huaweiCveJson': huaweiCveJson,
    'samsungCveJson': samsungCveJson,
    'cveDetailsJson': cveDetailsJson
}
afterColumnMapJson = os.path.join(cwd, allConf['analyzer']['afterColumnMapJson'])
afterMergeJson = os.path.join(cwd, allConf['analyzer']['afterMergeJson'])
afterFillCveSummaryJson = os.path.join(cwd, allConf['analyzer']['afterFillCveSummaryJson'])
afterCleanRefsJson = os.path.join(cwd, allConf['analyzer']['afterCleanRefsJson'])
allColumns = [
    'cveId',

    'androidPublishYear', # android -> publishDate
    'androidPublishMonth', # android -> publishDate
    'androidPublishDay', # android -> publishDate
    'androidDefinedBulletinSection', # android -> section
    'references', # android -> references; details -> refs
    'cpe', # android -> references
    'androidDefinedBulletinType', # android -> type
    # 'severity'
    'affectedAospVersions', # andriod -> updatedAospVersions
    'androidDefinedComponent', # android -> component

    'huaweiPublishYear',  # huawei -> huaweiUpdatedMonth
    'huaweiPublishMonth',  # huawei -> huaweiUpdatedMonth
    'affectedHuaweiVersions', # huawei -> affectedHuaweiVersions

    'sveId', # samsung -> sveId; details -> summary
    'samsungAffectedVersions', # samsung -> affectedVersion
    'samsungReportDay', # samsung -> reportDate
    'samsungReportMonth', # samsung -> reportDate
    'samsungReportYear', # samsung -> reportDate
    'samsungPublishYear', # samsung -> year
    'samsungPublishMonth', # samsung -> month

    'summary', # details -> summary
    'cveDetailsPublishYear', # details -> publishDate
    'cveDetailsPublishMonth', # details -> publishDate
    'cveDetailsPublishDay', # details -> publishDate
    'cvssScore',  # details -> CVSS Score
    'confidentialityImpact',  # details -> 'Confidentiality Impact'          
    'integrityImpact', # details -> Integrity Impact
    'availabilityImpact', # details -> Availability Impact
    'accessComplexity', # details -> Access Complexity
    'authentication', # details -> Authentication
    'gainedAccess', # details -> Gained Access
    'vulnerabilityTypes', # details -> Vulnerability Types
    'cweIds', # details -> CWE ID
]
googleSearchDirectory = os.path.join(cwd, allConf['analyzer']['googleSearchDirectory'])
bingSearchDirectory = os.path.join(cwd, allConf['analyzer']['bingSearchDirectory'])
# Analyzer ######################

# CVE #########################
cvePattern = '[c|C][v|V][e|E]-\d{4}-\d*'
types = {'RCE', 'EOP', 'ID', 'DOS'}
referencePrefix = {'A': 'A','QC': 'QC','M': 'M','N': 'N','B': 'B','U': 'U', 'ANDROID': 'A'}
severities = {'CRITICAL','HIGH','MODERATE','LOW','NSI'}
aospVersionPattern = '\d+[\\.\d*]*[ AND BELOW]?'
aospVersionPatternsAndSplitPatterns = [
    ['\d+[\\.\d+]*', 'NOSP'], # no need to split in this kind of pattern
    ['\d+[\\.\d+]*L', 'NOSP'], # no need to split in this kind of pattern
    ['\d+[\\.\d+]* AND \d+[\\.\d+]*', ' AND '],
    ['\d+[\\.\d+]* - \d+[\\.\d+]*', 'NOSP'], # deal with it after all versions are get
    ['\d+[\\.\d+]* AND BELOW', 'NOSP'] # deal with it after all versions are get
]
monthMap = {
    'January':1,
    'February':2,
    'March':3,
    'April':4,
    'May':5,
    'June':6,
    'July':7,
    'August':8,
    'September':9,
    'Sep':9,
    'Sept':9,
    'October':10,
    'November':11,
    'Nobember':11,
    'December':12,
}

# CVE #########################


## init
for module in 'scraper', 'analyzer':
    for key, val in allConf[module].items():
        if re.match('.*Directory', key):
            if not os.path.exists(val):
                os.mkdir(val)