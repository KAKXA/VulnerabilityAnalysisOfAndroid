import json
from collections import defaultdict

from analyzer.src.utils.column_map import columnMap, allColumns, googleCveIdAccordingToSveId
from config import *


def merge(testColumns=False):
    if testColumns:
        for metaJson, metaJsonPath in metaJsons.items():
            print(metaJson)

            colsDict = defaultdict(list)

            with open(metaJsonPath, "r") as fp:
                cveList = json.load(fp)
            for cveObj in cveList:
                for key, value in cveObj.items():
                    if len(colsDict[key]) > 2:
                        continue
                    colsDict[key].append(value)

            for k, v in colsDict.items():
                print(k, end="\t\t")
                print(v)

            print("===============================")
    else:
        afterColumnMapJsonList = []
        for metaJson, metaJsonPath in metaJsons.items():
            with open(metaJsonPath, "r") as fp:
                cveList = json.load(fp)
                for cveDict in cveList:
                    betterCveDict = columnMap(metaJson, cveDict)
                    afterColumnMapJsonList.append(betterCveDict)
        # with open(afterColumnMapJson, 'w') as fp:
        #     json.dump(afterColumnMapJsonList, fp)
        print(len(afterColumnMapJsonList))
        print('after column map json is done.')

        afterMergeCveMap = dict()
        sveMapToCve = dict()
        # build a map: sve->cve
        for acmJ in afterColumnMapJsonList:
            if acmJ['cveId'] and acmJ['sveId']:
                sveMapToCve[acmJ['sveId']] = acmJ['cveId']
        
        # build a map: sve->cve according to google search
        for acmJ in afterColumnMapJsonList:
            cveId = acmJ['cveId']
            sveId = acmJ['sveId']
            if not cveId and sveId not in sveMapToCve:
                cveDict = googleCveIdAccordingToSveId(sveId)
                if cveDict:
                    afterMergeCveMap[cveDict['cveId']]  = cveDict
                    sveMapToCve[sveId] = cveDict['cveId']

        # add to
        for acmJ in afterColumnMapJsonList:
            cveId = acmJ['cveId']
            sveId = acmJ['sveId']
            if not cveId:
                if sveId in sveMapToCve:
                    acmJ['cveId'] = sveMapToCve[sveId]
                    cveId = acmJ['cveId']
                else:
                    # print('Failed SVE:', sveId)
                    continue
            if cveId in afterMergeCveMap:
                bef = afterMergeCveMap[cveId]
                for col in allColumns:
                    if col == 'references' and acmJ[col] and bef[col]:
                        bef[col] += acmJ[col]
                    elif not bef[col]:
                        bef[col] = acmJ[col]
            else:
                afterMergeCveMap[cveId] = acmJ
        
        afterMergeCveList = list(afterMergeCveMap.values())
        print('Total CVE number:', len(afterMergeCveMap))
        with open(afterMergeJson, 'w') as fp:
            json.dump(afterMergeCveList, fp)
        
if __name__ == "__main__":
    merge()
