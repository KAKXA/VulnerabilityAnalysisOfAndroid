import re
import json

from config import *
from scraper.src.utils.cve_utils.convertor import cveIdIntStr2Str

def columnMap(parent: str, cveDict: dict) -> dict:
    res = dict()
    keyCount = len(allColumns)

    res = {k:None for k in allColumns}
    if parent == 'androidCveJson':
        for key, val in cveDict.items():
            if key == 'cveId':
                res[key] = cveIdIntStr2Str(str(val))
            elif key == 'publishDate':
                if val:
                    year, month, day = val.split('-')
                    res['androidPublishYear'] = int(year)
                    res['androidPublishMonth'] =int(month)
                    res['androidPublishDay'] = int(day)
            elif key == 'section':
                res['androidDefinedBulletinSection'] = val
            elif key == 'references':
                if val:
                    valList = json.loads(val)
                    res['references'] = []
                    se = set()
                    for cpe, ref in valList:
                        if cpe:
                            se.add(cpe)
                        if ref:
                            res['references'].append(ref)
                    res['cpe'] = list(se)
            elif key == 'type':
                res['androidDefinedBulletinType'] = val
            elif key == 'updatedAospVersions':
                if val:
                    res['affectedAospVersions'] = re.split(',|, ', val)
            elif key == 'component':
                res['androidDefinedComponent'] = val
    elif parent == 'huaweiCveJson':
        for key, val in cveDict.items():
            if key == 'cveId':
                res[key] = val
            elif key == 'huaweiUpdatedMonth':
                if val:
                    year, month = val.split('-')
                    res['huaweiPublishYear'] = year
                    res['huaweiPublishMonth'] = month
            elif key == 'affectedHuaweiVersions':
                res['affectedHuaweiVersions'] = re.split(',|, ', val)
    elif parent == 'samsungCveJson':
        for key, val in cveDict.items():
            if key == 'cveId':
                res[key] = val
            elif key == 'sveId':
                res[key] = val
            elif key == 'affectedVersion':
                res['samsungAffectedVersions'] = re.split(',|, ', val)
            elif key == 'reportDate':
                if val:
                    if val == 'Blackhat London 2015':
                        val = 'June 17, 2015'
                    mdy = re.split(',* |\xa0|,', val)
                    month = monthMap[mdy[0]]
                    day = mdy[1]
                    year = mdy[2]
                    res['samsungReportMonth'] = int(month)
                    res['samsungReportDay'] = int(day)
                    res['samsungReportYear'] = int(year)
            elif key == 'year':
                res['samsungPublishYear'] = int(val)
            elif key == 'month':
                res['samsungPublishMonth'] = int(val)

    elif parent == 'cveDetailsJson':
        for key, val in cveDict.items():
            if key == 'cveId':
                res[key] = val
            elif key == 'summary':
                res[key] = val
                sveId = re.search(r'SVE-\d{4}-\d*', val, re.S)
                if sveId:
                    res['sveId'] = sveId.group()
            elif key == 'publishDate':
                if val:
                    year, month, day = val.split('-')
                    res['cveDetailsPublishYear'] = year
                    res['cveDetailsPublishMonth'] = month
                    res['cveDetailsPublishDay'] = day
            elif key == 'CVSS Score':
                res['cvssScore'] = float(val)
            elif key == 'Confidentiality Impact':
                res['confidentialityImpact'] = val
            elif key == 'Integrity Impact':
                res['integrityImpact'] = val
            elif key == 'Availability Impact':
                res['availabilityImpact'] = val
            elif key == 'Access Complexity':
                res['accessComplexity'] = val
            elif key == 'Authentication':
                res['authentication'] = val
            elif key == 'Gained Access':
                res['gainedAccess'] = val
            elif key == 'Vulnerability Types':
                res['vulnerabilityTypes'] = val
            elif key == 'CWE ID':
                res['cweIds'] = val
            elif key == 'refs':
                if val:
                    res['references'] = [ref for ref in val]
            
    else:
        raise Exception()
    
    if len(res.keys()) != keyCount:
        raise Exception(set(res.keys()) - set(allColumns))
    
    return res
