import json
from xml.dom import NotFoundErr

from scraper.src.get_cve_details import getOneCveDetail
from cleaner.src.utils.column_map import columnMap, allColumns
from cleaner.src.utils.google_cveid_according_to_sveid import googleCveIdAccordingToSveId
from cleaner.src.utils.load import loadAll
from config import *

def merge():
    afterColumnMapJsonList = []
    for metaJson, metaJsonPath in metaJsons.items():
        with open(metaJsonPath, "r") as fp:
            cveList = json.load(fp)
            for cveDict in cveList:
                betterCveDict = columnMap(metaJson, cveDict)
                afterColumnMapJsonList.append(betterCveDict)
    # with open(afterColumnMapJson, 'w') as fp:
    #     json.dump(afterColumnMapJsonList, fp)
    print(len(afterColumnMapJsonList))
    print('after column map json is done.')

    afterMergeCveMap = dict()
    sveMapToCve = dict()
    # build a map: sve->cve
    for acmJ in afterColumnMapJsonList:
        if acmJ['cveId'] and acmJ['sveId']:
            sveMapToCve[acmJ['sveId']] = acmJ['cveId']
    
    # build a map: sve->cve according to google search
    for acmJ in afterColumnMapJsonList:
        cveId = acmJ['cveId']
        sveId = acmJ['sveId']
        if not cveId and sveId not in sveMapToCve:
            cveDict = googleCveIdAccordingToSveId(sveId)
            if cveDict:
                afterMergeCveMap[cveDict['cveId']]  = cveDict
                sveMapToCve[sveId] = cveDict['cveId']

    # add to
    for acmJ in afterColumnMapJsonList:
        cveId = acmJ['cveId']
        sveId = acmJ['sveId']
        if not cveId:
            if sveId in sveMapToCve:
                acmJ['cveId'] = sveMapToCve[sveId]
                cveId = acmJ['cveId']
            else:
                # print('Failed SVE:', sveId)
                continue
        if cveId in afterMergeCveMap:
            bef = afterMergeCveMap[cveId]
            mergeAftToBef(bef, acmJ)
        else:
            afterMergeCveMap[cveId] = acmJ
    
    afterMergeCveList = list(afterMergeCveMap.values())
    print('Total CVE number:', len(afterMergeCveMap))

    return afterMergeCveList

def mergeAftToBef(bef, aft):
    for col in allColumns:
        if col == 'references' and aft[col] and bef[col]:
            bef[col] += aft[col]
        elif not bef[col]:
            bef[col] = aft[col]
            
def fillCveSummary(cveList):
    for cveDict in cveList:
        if not cveDict['summary']:
            try:
                cveDetailsDict = getOneCveDetail(cveDict['cveId'])
            except NotFoundErr:
                continue
            cveDetailsAfterColumnMap = columnMap('cveDetailsJson', cveDetailsDict)
            mergeAftToBef(cveDict, cveDetailsAfterColumnMap)
            print(cveDict['cveId'] + "'s details are done.")
    return cveList

def cleanRefs(cveList):
    for cveDict in cveList:
        if cveDict['references']:
            newRefs = []
            for ref in cveDict['references']:
                if ref:
                    splitRes = re.split(', *| *,|\s', ref)
                    newRefs.extend(splitRes)
            cveDict['references'] = newRefs
    return cveList

if __name__ == "__main__":

    processes = [False, False, True]

    if processes[0]:
        afterMergeCveList = merge()
        with open(afterMergeJson, 'w') as fp:
            json.dump(afterMergeCveList, fp)

    if processes[1]:
        afterFillCveSummary = fillCveSummary(loadAll(afterMergeJson))
        with open(afterFillCveSummaryJson, 'w') as fp:
            json.dump(afterFillCveSummary, fp)

    if processes[2]:
        afterCleanRefs = cleanRefs(loadAll(afterFillCveSummaryJson))
        with open(afterCleanRefsJson, 'w') as fp:
            json.dump(afterCleanRefs, fp)
