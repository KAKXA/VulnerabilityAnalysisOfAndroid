import re
from config import *

def cleanRefsAndCweList(cveList):
    #################################
    for cveDict in cveList:
        if cveDict['references']:
            newRefs = []
            for ref in cveDict['references']:
                if ref:
                    splitRes = re.split(', *| *,|\s', ref)
                    newRefs.extend(splitRes)
            cveDict['references'] = newRefs

        if cveDict['cweIds']:
            cweIds = cveDict['cweIds']
            cveDict['cweIds'] = []

            tmpList = cweIds.split(',')
            for i in tmpList:
                if i.isdecimal():
                    cveDict['cweIds'].append(i)
        
    #################################
    allVersions = set()
    aospPat = '(\d+(\\.\d+)*)'
    for cveDict in cveList:
        if cveDict['affectedAospVersions']:
            for dVersion in cveDict['affectedAospVersions']:
                for version in re.findall(aospPat, dVersion):
                    if version:
                        allVersions.add(version[0])

    andBelow = '^(\d+[\\.\d+]*) AND BELOW$'
    andAbove = '^(\d+[\\.\d+]*) AND ABOVE$'
    allVersionsList = list(allVersions)
    allVersionsList.sort(key=lambda version: [int(i) for i in version.split('.')])
    allVersionRev = {}
    for i, version in enumerate(allVersionsList):
        allVersionRev[version] = i

    for cveDict in cveList:
        if cveDict['affectedAospVersions']:
            newAosp = []
            for dirtyVersion in cveDict['affectedAospVersions']:
                isBelow = re.search(andBelow, dirtyVersion)
                isAbove = re.search(andAbove, dirtyVersion)
                if isBelow:
                    for vIndex in range(allVersionRev[isBelow.group(1)] + 1):
                        newAosp.append(allVersionsList[vIndex])
                elif isAbove:
                    for vIndex in range(allVersionRev[isAbove.group(1)], len(allVersionsList) + 1):
                        newAosp.append(allVersionsList[vIndex])
                else:
                    for version in re.findall(aospPat, dirtyVersion):
                        if version:
                            newAosp.append(version[0])
            cveDict['affectedAospVersions'] = newAosp

    #################################
    for cveDict in cveList:
        if cveDict['affectedHuaweiVersions']:
            afs = cveDict['affectedHuaweiVersions']
            cveDict['affectedHuaweiVersions'] = [i.strip() for i in afs]

    #################################
    for cveDict in cveList:
        if cveDict['summary']:
            text = cveDict['summary']
            textLower = text.lower()
            textRemoveMark = re.sub('[^a-z\']', ' ', textLower)
            wordList = re.split(' +', textRemoveMark)
            cveDict['summary'] = wordList
            # newWordList = []
            # for word in wordList:
            #     if word not in summaryStopWords:
            #         newWordList.append(word)
            # cveDict['summary'] = newWordList

    return cveList

def isVersion(version: str):
    pat = '^\d(.\d)+$'
    if re.match(pat, version):
        return True
    else:
        return False
