import re
import os
import json
from datetime import date
from bs4 import BeautifulSoup
from config import *
from collections import defaultdict
from scraper.src.model.cve import CVE
from scraper.src.utils.get_html import getHtml
from scraper.src.exception.cve_exception import ColumnUninterpretable
from scraper.src.utils.get_cve_list_utils.get_headers_and_sub_htmls import getHeadersAndSubHtmls
from scraper.src.utils.get_cve_list_utils.references_handler import referencesHandler

def getBulletinMonthlyPage(resolvedMainPageJson, bulletins, bulletinMainPageUrl, localDirectory, restart=False):
    if not os.path.exists(resolvedMainPageJson) or restart:
        with open(resolvedMainPageJson, 'w') as fp:
            json.dump([], fp)

    with open(resolvedMainPageJson, 'r') as fp:
        resolvedBulletins = set(json.load(fp))

    res = []
    for androidBulletin in bulletins:
        path = androidBulletin['path']
        if path in resolvedBulletins:
            continue

        publishDate = androidBulletin['publishDate']
        print('Analysing', path)
        res.extend(getCveListOfOneBulletin(path, publishDate, bulletinMainPageUrl, localDirectory))

        resolvedBulletins.add(path)
        with open(resolvedMainPageJson, 'w') as fp:
            json.dump(list(resolvedBulletins), fp)

    return res

def getCveListOfOneBulletin(path: str, publishDate: date, bulletinMainPageUrl, localDirectory) -> list:
    eachBulletinHtmlLocal = os.path.join(localDirectory, path + '.html')
    eachBulletinsHtml = bulletinMainPageUrl + '/' + path
    html = getHtml(eachBulletinsHtml, eachBulletinHtmlLocal, model='not rewrite')

    cveDict = defaultdict(CVE)
    for h2Header, h2Html in getHeadersAndSubHtmls('h2', html, pattern='Security patches', end='Common questions'):
        for h3Header, h3Html in getHeadersAndSubHtmls('h3', h2Html):
            section = h3Header.getText()
            h3Bs = BeautifulSoup(h3Html, 'lxml')

            for table in h3Bs.find_all('table'):
                tr = table.find('tr')
                ths = tr.find_all('th')
                cols = []
                
                cveIdColNum = -1
                for i, th in enumerate(ths):
                    try:
                        setMethod = col2MethodName(th.get_text())
                        if setMethod == 'setCveId':
                            cveIdColNum = i
                        cols.append(setMethod)
                    except:
                        thText = th.getText()
                        raise ColumnUninterpretable('thText')

                if cveIdColNum == -1:
                    continue

                for i, tr in enumerate(table.find_all('tr')):
                    if i == 0:
                        continue
                    tds = tr.find_all('td')
                    if len(tds) != len(cols):
                        continue
                    cveId = tds[cveIdColNum].getText()
                    cveId = re.search('[c|C][v|V][e|E]-\d{4}-\d+', cveId) if cveId else None
                    if not cveId:
                        continue
                    else:
                        cveId = cveId.group()
                    for i, td in enumerate(tds):
                        if not cols[i]:
                            continue
                        if cols[i] == 'setReferences':
                            refs = referencesHandler(td)
                            if refs:
                                cveDict[cveId].__getattribute__(cols[i])(refs)
                        else:
                            if td.getText():
                                cveDict[cveId].__getattribute__(cols[i])(td.getText())
                    
                    cveDict[cveId].setCveId(cveId)
                    cveDict[cveId].setSection(section)
                    cveDict[cveId].setPublishDate(publishDate)
    
    return cveDict.values()