import re
import os
import json

from datetime import date
from bs4 import BeautifulSoup
from collections import defaultdict
from scraper.src.utils.get_html import getHtml
from config import *
from scraper.src.model.db import DB
from scraper.src.model.cve import CVE
from scraper.src.exception.cve_exception import ColumnUninterpretable, CveIdNotExists
from scraper.src.utils.get_cve_list_utils.get_headers_and_sub_htmls import getHeadersAndSubHtmls

def getCveList():
    if not os.path.exists(resolvedAndroidBulletinJson):
        with open(resolvedAndroidBulletinJson, 'w') as fp:
            json.dump([], fp)

    with open(resolvedAndroidBulletinJson, 'r') as fp:
        resolvedBulletins = set(json.load(fp))

    db = DB(cveDbConf)
    if not db.existsTable(CVE):
        db.createTable(CVE)

    try:
        with open(androidBulletinJson, 'r') as fp:
            allAndroidBulletin = json.load(fp)
            for androidBulletin in allAndroidBulletin:
                path = androidBulletin['path']

                if path in resolvedBulletins:
                    continue

                publishDate = androidBulletin['publishDate']
                getCveListOfOneBulletin(path, publishDate, db)

                resolvedBulletins.add(path)
                with open(resolvedAndroidBulletinJson, 'w') as fp:
                    json.dump(list(resolvedBulletins), fp)
    finally:
        db.close()

def getCveListOfOneBulletin(path: str, publishDate: date, db: DB):
    eachBulletinHtmlLocal = os.path.join(androidBulletinsDirectory, path + '.html')
    eachBulletinsHtml = androidBulletinUrl + '/' + path
    html = getHtml(eachBulletinsHtml, eachBulletinHtmlLocal, model='not rewrite')

    if path == '2015-08-01':
        h2HeadersAndHtmls = getHeadersAndSubHtmls('h2', html, 'acknowledgements')
    else:
        h2HeadersAndHtmls = getHeadersAndSubHtmls('h2', html, 'details')

    cveDict = defaultdict(CVE)
    for h2Header, h2Html in h2HeadersAndHtmls:
        tmpSecurityPatchLevel = re.search(r'\d{4}-\d{1,2}-\d{1,2}', h2Header.getText())
        if tmpSecurityPatchLevel:
            securityPatchLevel = tmpSecurityPatchLevel.group()
        else:
            securityPatchLevel = path

        for h3Header, h3Html in getHeadersAndSubHtmls('h3', h2Html):
            section = h3Header.getText()
            h3Bs = BeautifulSoup(h3Html, 'lxml')

            for table in h3Bs.find_all('table'):
                tr = table.find('tr')
                ths = tr.find_all('th')
                cols = []
                
                cveIdColNum = -1
                for i, th in enumerate(ths):
                    try:
                        setMethod = col2MethodName(th.get_text())
                        if setMethod == 'setCveId':
                            cveIdColNum = i
                        cols.append(setMethod)
                    except:
                        thText = th.getText()
                        raise ColumnUninterpretable('thText')
            
                if cveIdColNum == -1:
                    raise CveIdNotExists('section')

                for i, tr in enumerate(table.find_all('tr')):
                    if i == 0:
                        continue
                    tds = tr.find_all('td')
                    cveId = tds[cveIdColNum].getText()
                    for i, td in enumerate(tds):
                        if not cols[i]:
                            continue
                        if cols[i] == 'setReferences':
                            pass
                        else:
                            cveDict[cveId].__getattribute__(cols[i])(td.get_text())
                    
                    cveDict[cveId].setSection(section)
                    cveDict[cveId].setPublishDate(publishDate)
                    cveDict[cveId].setSecurityPatchLevel(securityPatchLevel)
    
    db.insertAll(cveDict.values())

if __name__ == '__main__':
    if not os.path.exists(androidBulletinsDirectory):
        os.mkdir(androidBulletinsDirectory)
    getCveList()