from config import *
from utils.get_html import postHtml

def getSamsungCveList():
    startYear = 2015
    endYear = 2022
    if not os.path.exists(samsungBulletinDirectory):
        os.mkdir(samsungBulletinDirectory)

    res = []
    for year in range(startYear, endYear + 1):
        res.extend(getOneSamsungPage(year))
    
    with open(samsungCveJson, 'w') as fp:
        json.dump(res, fp)


def getOneSamsungPage(year):
    localPath = os.path.join(samsungBulletinDirectory, str(year) + '.html')
    html = postHtml(samsungBulletinUrl, localPath, {'year': str(year)})

    monthSeparationSign = r'SMR-[A-Z]{3}-' + str(year)
    monthDict = {
        'DEC': 12, 'NOV': 11, 'OCT': 10, 'SEP': 9,
        'AUG': 8, 'JUL': 7, 'JUN': 6, 'MAY': 5,
        'APR': 4, 'MAR': 3, 'FEB': 2, 'JAN': 1
    }

    res = []
    monthsSign = re.findall(monthSeparationSign, html, re.S)
    for i, monthSign in enumerate(monthsSign):
        month = monthDict[monthSign.split('-')[1]]
        if i == len(monthsSign) - 1:
            pattern = monthSign + '.*$'
        else:
            pattern = monthSign + '.*?' + monthsSign[i + 1]

        subHtml = re.search(pattern, html, re.S)
        res.extend(getOneSamsungMonth(year, month, subHtml.group()))
    
    return res


def getOneSamsungMonth(year, month, html):
    typeSepSign = 'Along with Google patches'
    res = []
    typeSign = re.search(typeSepSign, html, re.S)
    if typeSign:
        befHtml = re.search('^.*' + typeSepSign, html, re.S).group()
        aftHtml = re.search(typeSepSign + '.*?' + 'Acknowledgements', html, re.S).group()
        svePattern = r'SVE-\d{4}-\d+'

        sveSigns = re.findall(svePattern, aftHtml)
        for i, sveSign in enumerate(sveSigns):
            if i == len(sveSigns) - 1:
                pattern = sveSign + '.*$'
            else:
                pattern = sveSign + '.*?' + sveSigns[i + 1]
        
            subsubHtmls = re.findall(pattern, aftHtml, re.S)
            for subsubHtml in subsubHtmls:
                sve = getOneSve(subsubHtml)
                if sve:
                    sve['year'] = year
                    sve['month'] = month
                    res.append(sve)
    else:
        befHtml = html
    
    for cveId in re.findall(cvePattern, befHtml):
        res.append({'cveId': cveId, 'year': year, 'month': month})

    return res

def getOneSve(html):
    res = dict()
    versionPattern = 'Affected versions:.*?<'
    reportDatePattern = 'Reported on:.*?<'

    cveId = re.search(cvePattern, html)
    version = re.search(versionPattern, html, re.S)
    reportDate = re.search(reportDatePattern, html, re.S)
    res['sveId'] = re.match('SVE-\d{4}-\d+', html).group()
    
    isSveUnit = False
    if cveId:
        isSveUnit = True
        res['cveId'] = cveId.group()
    if version:
        isSveUnit = True
        res['affectedVersion'] = version.group().strip('Affected versions:').strip('<').strip()
    if reportDate:
        isSveUnit = True
        res['reportDate'] = reportDate.group().strip('Reported on:').strip('<').strip()
    
    if isSveUnit:
        return res

if __name__ == '__main__':
    getSamsungCveList()