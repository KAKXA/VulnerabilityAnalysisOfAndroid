from bs4 import BeautifulSoup
from config import *
from datetime import date
from scraper.src.exception.get_huawei_cve_list_exception import MoreThanOneSeparationSignError
from scraper.src.model.cve import CVE
from scraper.src.model.db import DB
from scraper.src.utils.get_cve_list_utils.get_headers_and_sub_htmls import getHeadersAndSubHtmls
from scraper.src.utils.get_html import getHtml
from scraper.src.utils.get_huawei_cve_list_utils.get_month_range import get_month_range


def getHuaweiCveLists():
    startYear, startMonth = 2018, 1
    endYear, endMonth = 2022, 4
    res = []
    for year, month in get_month_range(date(startYear, startMonth, 1), date(endYear, endMonth, 1)):
        getOneHuaweiCveList(year, month, res)
    with open(huaweiCveJson, 'w') as fp:
        json.dump(res, fp)

def getOneHuaweiCveList(year, month, res):
    url = huaweiBulletinUrl + '/' + year + '/' + month
    if not os.path.exists(huaweiBulletinsDirectory):
        os.mkdir(huaweiBulletinsDirectory)
    localPath = os.path.join(huaweiBulletinsDirectory, year + '-' + month + '.html')

    html = getHtml(url, localPath)
    
    print('Dealing with ' + localPath)
    separationSignOfAndroidAndHuaweiPatches = 'This security update includes the following HUAWEI patches:'
    htmlOfAndroidAndhtmlOfHuawei = html.split(separationSignOfAndroidAndHuaweiPatches)
    if len(htmlOfAndroidAndhtmlOfHuawei) > 2:
        raise MoreThanOneSeparationSignError
    htmlOfAndroid = htmlOfAndroidAndhtmlOfHuawei[0]

    huaweiUpdateMonth = str(year) + '-' + str(month)
    
    sevPattern = "Critical|High|Medium|Moderate|Low"
    for ps in BeautifulSoup(htmlOfAndroid).find_all('p'):
        sevMatch = re.search(sevPattern, str(ps))
        if sevMatch:
            sev = sevMatch.group()
            for cveId in re.findall(cvePattern, str(ps)):
                cveId = cveId.upper()
                res.append({
                    'cveId': cveId, 
                    'huaweiSeverity': sev,
                    'huaweiUpdateMonth': huaweiUpdateMonth
                })

    if len(htmlOfAndroidAndhtmlOfHuawei) == 2:
        cveIds = []
        htmlOfHuawei = htmlOfAndroidAndhtmlOfHuawei[1]
        for cveId in re.findall(cvePattern, htmlOfHuawei):
            cveIds.append(cveId.upper())
    
        for i, cveId in enumerate(cveIds):
            if i == len(cveIds) - 1:
                subHtml = re.search(cveId + '.*$', html, re.S).group()
            else:
                subHtml = re.search(cveId + '.*?' + cveIds[i + 1], html, re.S).group()
            
            try:
                res.append({
                    'cveId': cveId,
                    'affectedHuaweiVersions': re.search('Affected versions:.*?<', subHtml, re.S).group().strip('Affected versions:').strip('<').strip(),
                    'huaweiSeverity': re.search(sevPattern, subHtml).group(),
                    'huaweiUpdateMonth': huaweiUpdateMonth
                })
            except Exception as e:
                print(subHtml)
                raise e
    
if __name__ == '__main__':
    getHuaweiCveLists()