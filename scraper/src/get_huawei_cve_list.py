from config import *
from datetime import date
from scraper.src.exception.get_huawei_cve_list_exception import AndroidCveNotExistsError, MoreThanOneSeparationSignError, androidCveNotExistsError
from scraper.src.model.cve import CVE
from scraper.src.model.db import DB
from scraper.src.utils.get_html import getHtml
from scraper.src.utils.get_huawei_cve_list_utils.get_month_range import get_month_range


def getHuaweiCveLists():
    startYear, startMonth = 2018, 1
    endYear, endMonth = 2022, 4
    db = DB(cveDbConf)
    for year, month in get_month_range(date(startYear, startMonth, 1), date(endYear, endMonth, 1)):
        getOneHuaweiCveList(db, year, month)

def getOneHuaweiCveList(db: DB, year, month):
    url = huaweiBulletinUrl + '/' + year + '/' + month
    if not os.path.exists(huaweiBulletinsDirectory):
        os.mkdir(huaweiBulletinsDirectory)
    localPath = os.path.join(huaweiBulletinsDirectory, year + '-' + month + '.html')

    html = getHtml(url, localPath)
    
    print('Dealing with ' + localPath)
    separationSignOfAndroidAndHuaweiPatches = 'This security update includes the following HUAWEI patches:'
    cveOfAndroidAndcveOfHuawei = html.split(separationSignOfAndroidAndHuaweiPatches)
    if len(cveOfAndroidAndcveOfHuawei) > 2:
        raise MoreThanOneSeparationSignError
    cveOfAndroid = cveOfAndroidAndcveOfHuawei[0]

    for cveId in re.findall(cvePattern, cveOfAndroid):
        cveId = cveId.upper()
        # if not db.existsIfCondition(CVE, {'cveId': cveId}):
        #     raise AndroidCveNotExistsError('cveId')
        db.insertOrUpdate(CVE, )
        db.update(CVE, cveId, {'cveId': cveId, 'huaweiUpdateMonth': date(year, month, 1)})

    if len(cveOfAndroidAndcveOfHuawei) == 2:
        cveOfHuawei = cveOfAndroidAndcveOfHuawei[1]
        for cveId in re.findall(cvePattern, cveOfHuawei):
            cveId = cveId.upper()
            if not db.existsIfCondition(CVE, {'cveId': cveId}):
                db.add('for i in range()')




if __name__ == '__main__':
    getHuaweiCveLists()