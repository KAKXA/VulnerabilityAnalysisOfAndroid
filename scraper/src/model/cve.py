import re
from config import *
from datetime import date
import logging
from ..exception.cve_exception import *
from ..utils.convertor import str2Date
from ..utils.cve_utils.convertor import cveIdStr2IntStr
from ..utils.decorator import noneCheck

class CVE:

    # class variable
    _sections = set()
    _components = set()

    def __init__(self):
        # these are non-nullable val
        # self.cveId
        # self.date
        # self.securityPatchLevel
        self.section = 'NSI'

        # these are nullable var
        self._references = []
        self._type = None
        self._severity = None
        self._updatedAospVersions = set()
        self._component = None

    @noneCheck
    def setCveId(self, cveId: str):
        res = re.search('[c|C][v|V][e|E]-\d{4}-\d*', cveId)
        if res:
            self._cveId = res.group().upper()
        else:
            raise WrongPatternError('cveId')
    
    def getCveId(self):
        return self._cveId

    @noneCheck
    def setPublishDate(self, publishDate):
        try:
            if isinstance(publishDate, str):
                publishDate = str2Date(publishDate)
            self._publishDate = publishDate
        except:
            raise WrongPatternError('publishDate')
    
    def getPublishDate(self) -> date:
        return self._publishDate

    @noneCheck
    def setSecurityPatchLevel(self, securityPatchLevel: str):
        res = re.search('\d{4}-\d{1,2}-\d{1,2}|ANDROID-\d+', securityPatchLevel.upper())
        if res:
            self._securityPatchLevel = res.group()
        else:
            raise WrongPatternError('securityPatchLevel')
    
    def getSecurityPatchLevel(self):
        return self._securityPatchLevel

    @noneCheck
    def setReferences(self, references: list):
        # references
        # [
        #   ['A-123': None],
        #   ['QC-123': 'a.com'],
        # ]
        for ref, refUrl in references:
            if not refUrl:
                raise NoneInputError('refUrl')
            belong = ref.split('-')[0].upper()
            if belong in referencePrefix:
                self._references.append([referencePrefix[belong], refUrl])
            else:
                raise WrongPatternError('ref')
    
    def getReferences(self):
        return self._references

    @noneCheck
    def setType(self, type: str):
        if type.upper() == 'N/A':
            self._type = None
        elif type.upper() in types:
            self._type = type.upper()
        else:
            raise WrongPatternError('type')
        
    def getType(self):
        return self._type

    @noneCheck
    def setSeverity(self, severity: str):
        sevUpper = severity.upper()
        for sev in severities:
            res = re.search(sev, sevUpper)
            if res:
                self._severity = severity.upper()
                return
        logging.warning('Ignoring severity: ' + severity + ' due to its bad format.')
    
    def getSeverity(self):
        return self._severity

    @noneCheck
    def setUpdatedAospVersions(self, aosp: str):
        aospArr = re.split(', *', aosp)
        for version in aospArr:
            match = False
            versionUpper = version.upper()
            for aospVersionPattern, splitPattern in aospVersionPatternsAndSplitPatterns:
                res = re.search(aospVersionPattern, versionUpper)
                if res:
                    for versionAfterSplit in res.group().split(splitPattern):
                        self._updatedAospVersions.add(versionAfterSplit)
                    break
                else:
                    raise WrongPatternError('aosp')
    
    def getUpdatedAospVersions(self):
        return self._updatedAospVersions

    @noneCheck
    def setSection(self, section: str):
        CVE._sections.add(section.upper())
        self._section = section.upper()
    
    def getSection(self):
        return self._section

    @noneCheck
    def setComponent(self, component: str):
        self._component = component.upper()
        CVE._components.add(component.upper())

    def getComponent(self):
        return self._component
    
    # database related
    def dbTableName():
        return "cve"

    def dbCreateTable():
        return '''
        create table cve (
            cveId int unsigned primary key,
            publishDate date not null,
            securityPatchLevel varchar(20) not null,
            section varchar(200) not null,
            `references` text,
            type varchar(10),
            severity varchar(10),
            updatedAospVersions varchar(200),
            component varchar(200)
        )
        '''
    
    def serialize(self):
        cols = []
        vals = []

        cols.append('cveId')
        vals.append(cveIdStr2IntStr(self.getCveId()))

        cols.append('publishDate')
        vals.append("'" + self.getPublishDate().isoformat() + "'")

        cols.append('securityPatchLevel')
        vals.append("'" + self.getSecurityPatchLevel() + "'"),

        cols.append('section')
        vals.append("'" + self.getSection() + "'")

        if self.getReferences():
            cols.append('`references`')
            vals.append("'" + json.dumps(self.getReferences()) + "'")
        
        if self.getType():
            cols.append('`type`')
            vals.append("'" + self.getType() + "'")

        if self.getSeverity():
            cols.append('severity')
            vals.append("'" + self.getSeverity() + "'")
        
        if self.getUpdatedAospVersions():
            cols.append('updatedAospVersions')
            vals.append("'" + json.dumps(list(self.getUpdatedAospVersions())) + "'")

        if self.getComponent():
            cols.append('`component`')
            vals.append("'" + self.getComponent() + "'")
        
        self._cols = '(' + (','.join(cols)) + ')'
        self._vals = '(' + (','.join(vals)) + ')'

    def getCols(self):
        return self._cols
    
    def getVals(self):
        return self._vals

    def dbInsert(self):
        # insert into cve () values ()
        self.serialize()
        return "insert into cve " + self.getCols() + " values " + self.getVals()
    
    def dbExists(self):
        return "select * from cve where cveId = " + cveIdStr2IntStr(self._cveId)

    # class method
    def getAllSections():
        return CVE._sections

    def getAllComponents():
        return CVE._components
    
    # date
    ######################################
    # pubishDate
    # ---------non-nullable, date
    ######################################

    # <h2> / path
    ######################################
    # securityPatchLevel
    # (if can't find a patch-level-date as patch level,
    # use input variable:path as patch level)
    # ---------non-nullable, str of date/androidX
    ######################################

    # <h3>
    ######################################
    # section
    # ---------non-nullable, str of any
    ######################################

    # items in table
    ######################################
    # cveID
    # ---------surely exists
    # ---------non-nullable, unique, str of CVE-xxx-xxx

    # references
    # ---------nullable list like [[ref, refUrl]]

    # type
    # ---------nullable, str
    
    # severity
    # ---------nullable, str

    # updatedAospVersions
    # ---------nullable, str

    # component
    # ---------nullable
    ######################################