import re
import os
import json

from datetime import date
from bs4 import BeautifulSoup
from utils.get_html import getHtml
from scraper.src.python.model.db import DB
from config import *

def getCveList():
    db = DB(cveDbConf, 'cve')
    try:
        with open(androidBulletinJson, 'r') as fp:
            allAndroidBulletin = json.load(fp)
            for androidBulletin in allAndroidBulletin:
                path = androidBulletin['path']
                publishDate = androidBulletin['publishDate']
                getCveListOfOneBulletin(path, publishDate, db)
    finally:
        db.close()

def getCveListOfOneBulletin(path: str, publishDate: date):
    eachBulletinHtmlLocal = os.path.join(androidBulletinsDirectory, path + '.html')
    eachBulletinsHtml = androidBulletinUrl + '/' + path
    html = getHtml(eachBulletinsHtml, eachBulletinHtmlLocal, model='rewrite')

    bs = BeautifulSoup(html, 'html.parser')

    # date
    ######################################
    # pubishDate
    # ---------non-nullable, date
    ######################################

    # <h2> / path
    ######################################
    # securityPatchLevel
    # (if can't find a patch-level-date as patch level,
    # use input variable:path as patch level)
    # ---------non-nullable, str of date/androidX
    ######################################

    # <h3>
    ######################################
    # section
    # ---------non-nullable, str of any
    ######################################

    # items in table
    ######################################
    # cveID
    # ---------surely exists
    # ---------non-nullable, unique, str of CVE-xxx-xxx

    # references
    # ---------nullable list like [[ref, refUrl]]

    # type
    # ---------nullable, str
    
    # severity
    # ---------nullable, str

    # updatedAospVersions
    # ---------nullable, str

    # component
    # ---------nullable
    ######################################
    cveList = []

    if path == '2015-08-01':
        detailH2s = bs.find_all('h2', attrs={'id': 'acknowledgements'})
    else:
        detailH2s = bs.find_all('h2', attrs={'id': re.compile(r'.*details.*')})

    for detailH2 in detailH2s:
        tmpSecurityPatchLevel = re.search('\d{4}-\d{1,2}-\d{1,2}', detailH2.title())
        if tmpSecurityPatchLevel:
            securityPatchLevel = tmpSecurityPatchLevel.group()
        else:
            securityPatchLevel = path
        
        for sectionH3 in detailH2.find_all('h3'):
            section = sectionH3.title()
            for table in sectionH3.find_all('table'):
                tr = table.find('tr')
                ths = tr.find_all('th')
                masks = [0] + [col2MethodName[th] for th in ths]
            
                for i, col in table.find_all('tr'):
                    if i == 0:
                        continue
                    if not masks[i]:
                        continue








if __name__ == '__main__':
    if not os.path.exists(androidBulletinsDirectory):
        os.mkdir(androidBulletinsDirectory)
    getCveList()