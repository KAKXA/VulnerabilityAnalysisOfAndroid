import re
import sys
import logging
from typing import final
from ..utils.convertor import str2Date

types = {'RCE', 'EOP', 'ID', 'DOS'}
referencePrefix = {'A','QC','M','N','B','U'}
severities = {'CRITICAL','HIGH','MODERATE','LOW','NSI'}
aospVersionPattern = '\d+[\\.\d*]*[ AND BELOW]?'

class CVE:

    def __init__(self):
        pass

    def setCveId(self, cveId: str):
        pattern = re.match('[c|C][v|V][e|E]-[0-9]{4}-[0-9]*', cveId)
        if pattern == None:
            logging.error('Wrong CVE pattern: ' + cveId)
        else:
            self._cveId = cveId.upper()
    
    def getCveId(self):
        return self._getOrDefault('_cveId')

    def setPublishDate(self, publishDate):
        try:
            dt = str2Date(publishDate)
            self._publishDate = dt
        except:
            logging.error('Wrong publish date pattern: ' + publishDate)
    
    def getPublishDate(self):
        return self._getOrDefault('_publishDate')

    def setSecurityPatchLevel(self, securityPatchLevel):
        if securityPatchLevel == None or securityPatchLevel == '':
            self._securityPatchLevel = None
            return
        pattern = re.match('\d{4}-\d{1,2}-\d{1,2}', securityPatchLevel)
        if (pattern == None):
            logging.error('Wrong security patch level pattern: ' + securityPatchLevel)
        else:
            self._securityPatchLevel = securityPatchLevel
    
    def getSecurityPatchLevel(self):
        return self._getOrDefault('_securityPatchLevel')

    def setReference(self, reference: str):
        if reference == None or reference == '':
            self._reference = None
            return
        belong = reference.split('-')[0]
        if belong.upper() in referencePrefix:
            self._reference = reference.upper()
        else:
            logging.error('Unknown reference value belong: ' + belong)
    
    def getReference(self):
        return self._getOrDefault('_reference')
        
    
    def setReferenceUrl(self, url: str):
        if url == None or url == '':
            self._referenceUrl = None
        else:
            self._referenceUrl = url

    def getReferenceUrl(self):
        return self._getOrDefault('_referenceUrl')

    def setType(self, type: str):
        if type == None or type.upper() not in types:
            if type == None or type.upper() in {'', 'N/A'}:
                self._type = None
            else:
                logging.error('Unknown type: ' + type)
        else:
            self._type = type.upper()
        
    def getType(self):
        return self._getOrDefault('_type')

    def setSeverity(self, severity: str):
        if severity == '' or severity == None:
            self._severity = None
        elif severity.upper() in severities:
            self._severity = severity.upper()
        else:
            logging.error('Unknown severity: ' + severity)
    
    def getSeverity(self):
        return self._getOrDefault('_severity')

    def setUpdatedAospVersions(self, aosp: str):
        self._updatedAospVersions = set()
        if aosp == '' or aosp == None:
            return
        aospArr = re.split(', *', aosp)
        for version in aospArr:
            if re.match(aospVersionPattern, version.upper()):
                self._updatedAospVersions.add(version.upper())
            else:
                logging.error('Unknown aosp version: ' + version)
    
    def getUpdatedAospVersions(self):
        return self._getOrDefault('_updatedAospVersions', set())

    _sections = set()
    def setSection(self, section: str):
        if section == '' or section == None:
            logging.error('No section are found!')
        else:
            CVE._sections.add(section.upper())
            self._section = section.upper()
    
    def getSection(self):
        return self._getOrDefault('_section')

    def getAllSections(self=None):
        return CVE._sections

    _components = set()
    def setComponent(self, component: str):
        if component == '' or component == None:
            self._component = None
        else:
            self._component = component.upper()
            CVE._components.add(component.upper())

    def getComponent(self):
        return self._getOrDefault('_component')
    
    def getAllComponents(self=None):
        return CVE._components
    
    def _getOrDefault(self, target, elseIf=None):
        try:
            return self.__getattribute__(target)
        except:
            logging.warning('Variable is not set: ' + target)
            return elseIf
        