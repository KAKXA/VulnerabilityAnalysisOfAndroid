import re
from datetime import date
from utils.convertor import str2Date

types = {'RCE', 'EoP', 'ID', 'DoS'}
referencePrefix = {'A','QC','M','N','B','U'}
severities = {'Critical','High','Moderate','Low','NSI'}
aospVersionPatterns = {'\d{1,2}\\.\d{0,2}', '\d{1,2}\\.\d{0,2} and below'}
# sections = {
#     'Framework',
#     'Kernel components',
#     'MediaTek components', 
#     'Qualcomm components', 
#     'Qualcomm closed-source components', 
#     'Google Play system updates'
# }
class CVE:

    def __init__(self):
        pass

    def setCveId(self, cveId):
        pattern = re.match('cve-[0-9]{4}-[0-9]*', cveId)
        if pattern == None:
            raise(Exception('Wrong CVE pattern: ' + cveId))
        else:
            self._cveId = cveId

    def setPublishDate(self, publishDate):
        try:
            dt = str2Date(publishDate)
            return dt
        except Exception:
            print('Wrong publish date pattern: ' + publishDate)

    def setSecurityPatchLevel(self, securityPatchLevel):
        if securityPatchLevel == None or securityPatchLevel == '':
            self._securityPatchLevel = None
            return
        pattern = re.match('[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}')
        if (pattern == None):
            raise('Wrong security patch level pattern: ' + securityPatchLevel)
        else:
            self._securityPatchLevel = securityPatchLevel

    def setReference(self, reference: str):
        if reference == None or reference == '':
            self._reference = None
        belong = reference.split('-')[0]
        if belong in referencePrefix:
            self._referenceValueBelong = belong
        else:
            raise('Unknown reference value belong: ' + belong)
    
    def setReferenceUrl(self, url: str):
        if url == None or url == '':
            self._referenceUrl = None
        else:
            self._referenceUrl = url

    def setType(self, type: str):
        if type not in types:
            if type in {None, '', 'N/A'}:
                self._type = None
            else:
                raise('Unknown type: ' + type)
        else:
            self._type = type

    def setSeverity(self, severity: str):
        if severity == '' or severity == None:
            self._severity = None
        elif severity in severities:
                self._severity = severity
        else:
            raise('Unknown severity: ' + severity)


    def setUpdatedAospVersions(self, aosp: str):
        self._updated_aosp_versions = []
        if aosp == '' or aosp == None:
            self._updated_aosp_versions = []
        else:
            aospArr = re.split(',* *', aosp)
            for version in aospArr:
                for pat in aospVersionPatterns:
                    if re.match(pat, version):
                        self._updated_aosp_versions.append(version)
                    else:
                        raise('Unknown aosp version: ' + version)

    _sections = set()
    def setSection(self, section):
        if section == '' or section == None:
            raise('No section are found!')
        else:
            CVE.sections.add(section)
            self._section = section

    def getAllSections(self):
        return CVE._sections

    _component = ''
    def setComponent(self, component):
        if component == '' or component == None:
            self._component



if __name__ == '__main__':
    cve = CVE()
    cve.setCveId('cve-2018-0909')
    print(cve._cveId)
