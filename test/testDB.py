import random
import unittest
from datetime import date
from config import *
from scraper.src.python.exception.db_exception import *
from scraper.src.python.model.cve import CVE
from scraper.src.python.model.db import DB

class ValidCVE:
    def __init__(self) -> None:
        self._cnt = 1
    def next(self):
        cve = CVE()
        cve.setCveId('cve-2015' + '-' + str(self._cnt))
        cve.setPublishDate(date(2018,1,1))
        cve.setSecurityPatchLevel('2018-01-05')
        cve.setSection('Android Kernel')

        if random.random() > 0.5:
            cve.setComponent('media stream')
        if random.random() > 0.5:
            cve.setReferences([['A-123', 'a.com']])
        if random.random() > 0.5:
            cve.setType('DoS')
        if random.random() > 0.5:
            cve.setSeverity('critical')
        if random.random() > 0.5:
            cve.setUpdatedAospVersions('11,12L')
        self._cnt += 1

        return cve

class TestDB(unittest.TestCase):

    def testCreateTable(self):
        testDict = allConf['testDb']
        db = DB(testDict)
        try:
            if db.existsTable(CVE):
                self.assertEqual(db.dropTable(CVE), None)
            else:
                self.assertRaises(TableNotExistsError, db.dropTable, CVE)

            self.assertEqual(db.createTable(CVE), None)
            self.assertRaises(TableExistsError, db.createTable, CVE)
            self.assertEqual(db.dropTable(CVE), None)
        finally:
            db.close()
    
    def testInsert(self):
        testDict = allConf['testDb']
        db = DB(testDict)
        try:
            if db.existsTable(CVE):
                db.dropTable(CVE)
            self.assertEqual(db.createTable(CVE), None)
            
            vc = ValidCVE()
            for i in range(100):
                self.assertEqual(db.insert(vc.next()), 1)
        finally:
            db.close()


if __name__ == '__main__':
    unittest.main()