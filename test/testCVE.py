import sys
sys.path.append('D:\graduate_design\code')

import unittest
from datetime import date
from scraper.src.python.model.cve import CVE


class TestCVE(unittest.TestCase):
    def check(self, setFunc, getFunc, varTargetPairs: list):
        for var, target in varTargetPairs:
            cve = CVE()
            setFunc(cve, var)
            self.assertEqual(getFunc(cve), target)

    def testCVEId(self):
        self.check(CVE.setCveId, CVE.getCveId, [
            ['cve-2021-123', 'CVE-2021-123'],
            ['cve-202-123', None],
            ['CVE-2021-123','CVE-2021-123'],
            ['2021-123',None]
        ])

    def testPublishDate(self):
        self.check(CVE.setPublishDate, CVE.getPublishDate,[
            ['May 5, 2021', date(2021, 5, 5)],
            ['December 30, 2015', date(2015, 12,30)],
            ['May 5,2021', None],
            ['2020-10-1', None],
            ['5 May, 2021', None]
        ])

    def testSecurityPatchLevel(self):
        self.check(CVE.setSecurityPatchLevel,
        CVE.getSecurityPatchLevel, [
            ['2021-10-7', '2021-10-7'],
            ['2021-10-', None],
            ['', None],
            [None, None]
        ])
    
    def testReference(self):
        self.check(CVE.setReference, CVE.getReference, [
            ['A-1234123', 'A-1234123'],
            ['QC-22', 'QC-22'],
            ['b-22', 'B-22'],
            ['', None],
            [None, None],
            ['234234', None]
        ])
    
    def testReferenceUrl(self):
        self.check(CVE.setReferenceUrl, CVE.getReferenceUrl, [
            ['https://a.com', 'https://a.com'],
            ['', None],
            [None, None]
        ])
    
    def testType(self):
        self.check(CVE.setType, CVE.getType, [
            ['N/A', None],
            ['', None],
            [None, None],
            ['badType', None],
            ['RCE', 'RCE'],
            ['rCe', 'RCE'],
            ['DoS', 'DOS']
        ])
    
    def testSeverity(self):
        self.check(CVE.setSeverity, CVE.getSeverity, [
            [None, None],
            ['', None],
            ['Critical', 'CRITICAL'],
            ['high', 'HIGH'],
            ['badSev', None]
        ])

    def testUpdatedAospVersions(self):
        self.check(CVE.setUpdatedAospVersions,
        CVE.getUpdatedAospVersions, [
            ['9, 10, 11', {'9','10','11'}],
            ['1,2,3', {'1','2','3'}],
            ['', set()],
            ['1',{'1'}],
            ['5.4 and below', {'5.4 AND BELOW'}],
            ['6,7,8,  9.1, 5.4 and below', {'6','7','8','9.1','5.4 AND BELOW'}]
        ])
    
    def testSection(self):
        self.check(CVE.setSection, CVE.getSection, [
            ['A', 'A'],
            ['B', 'B'],
            ['c', 'C'],
            ['b', 'B'],
            [None, None],
            ['', None],
        ])
        self.assertEqual(CVE.getAllSections(), {'A','B','C'})
    
    def testComponent(self):
        self.check(CVE.setComponent, CVE.getComponent, [
            ['A', 'A'],
            ['B', 'B'],
            ['c', 'C'],
            ['b', 'B'],
            [None, None],
            ['', None],
        ])
        self.assertEqual(CVE.getAllComponents(), {'A','B','C'})


if __name__ == '__main__':
    unittest.main()