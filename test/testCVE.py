import unittest
from datetime import date
from inspect import isclass

from attr import Attribute
from pyparsing import nullDebugAction
from scraper.src.python.exception.cve_exception import *
from scraper.src.python.model.cve import CVE


class TestCVE(unittest.TestCase):
    def check(self, setFunc, getFunc, varTargetPairs: list):
        for setVar, setTargetException, getTarget in varTargetPairs:
            cve = CVE()
            if setTargetException == None:
                setFunc(cve, setVar)
            else:
                self.assertRaises(setTargetException, setFunc, cve, setVar)

            if isclass(getTarget) and issubclass(getTarget, Exception):
                self.assertRaises(getTarget, getFunc, cve)
            else:
                self.assertEqual(getTarget, getFunc(cve))

    def testCVEId(self):
        self.check(
            CVE.setCveId,
            CVE.getCveId,
            [
                ["cve-2021-123", None, "CVE-2021-123"],
                ["cve-202-123", WrongPatternError, AttributeError],
                ["2021-123", WrongPatternError, AttributeError],
                ["", NoneInputError, AttributeError],
            ],
        )

    def testPublishDate(self):
        self.check(
            CVE.setPublishDate,
            CVE.getPublishDate,
            [
                ["May 5, 2021", None, date(2021, 5, 5)],
                ["December 30, 2015", None, date(2015, 12, 30)],
                ["May 5,2021", WrongPatternError, AttributeError],
                ["2020-10-1", WrongPatternError, AttributeError],
                ["5 May, 2021", WrongPatternError, AttributeError],
                [date(2021, 10, 10), None, date(2021, 10, 10)],
            ],
        )

    def testSecurityPatchLevel(self):
        self.check(
            CVE.setSecurityPatchLevel,
            CVE.getSecurityPatchLevel,
            [
                ["2021-10-7", None, "2021-10-7"],
                ["2021-10-", WrongPatternError, AttributeError],
                ["", NoneInputError, AttributeError],
            ],
        )

    def testReferences(self):
        self.check(
            CVE.setReferences,
            CVE.getReferences,
            [
                [[], NoneInputError, []],
                [[["A-1", "a.com"], ["QC-1", "b.com"]], None, [["A", "a.com"], ["QC", "b.com"]]],
                [[["AB-1", "a.com"], ["QC-1", "b.com"]], WrongPatternError, []],
                [[["A-1", "a.com"], ["QCB-1", "b.com"]], WrongPatternError, [["A", "a.com"]]],
            ],
        )

    def testType(self):
        self.check(
            CVE.setType,
            CVE.getType,
            [
                ["", NoneInputError, None],
                ["N/A", None, None],
                ["badType", WrongPatternError, None],
                ["RCE", None, "RCE"],
                ["rCe", None, "RCE"],
                ["DoS", None, "DOS"],
            ],
        )

    def testSeverity(self):
        self.check(CVE.setSeverity, CVE.getSeverity, [
            ["", NoneInputError, None],

            ["Critical", None, "CRITICAL"],
            ["high", None, "HIGH"], 
            ["badSev", WrongPatternError, None],
        ])

    def testUpdatedAospVersions(self):
        self.check(CVE.setUpdatedAospVersions,
        CVE.getUpdatedAospVersions, [
            ['', NoneInputError, set()],

            ['9, 10, 11', None, {'9','10','11'}],
            ['1,2,3', None, {'1','2','3'}],
            ['1', None, {'1'}],
            ['10, 11, 12L', None, {'10', '11', '12L'}],
            ['5.1 - 6.0', None, {'5.1 - 6.0'}],
            ['5.0 and 5.1', None, {'5.0', '5.1'}],
            ['5.4 and below', None, {'5.4 AND BELOW'}],
            ['6,7,8,  9.1, 5.4 and below', None, {'6','7','8','9.1','5.4 AND BELOW'}],
            ['6,7,8,9.1,5.4 and 4.1 and 3', WrongPatternError, {'6','7','8','9.1'}]
        ])

    def testType(self):
        self.check(CVE.setType, CVE.getType, [
            ['', NoneInputError, None],
            ['Dos', None, 'DOS'],
            ['N/A', None, None],
            ['badType', WrongPatternError, None]
        ])

    def testSection(self):
        self.check(CVE.setSection, CVE.getSection, [
            [None, NoneInputError, AttributeError],
            ['', NoneInputError, AttributeError],

            ['A', None, 'A'],
            ['B', None, 'B'],
            ['c', None, 'C'],
            ['b', None, 'B'],
        ])
        self.assertEqual(CVE.getAllSections(), {'A','B','C'})

    def testComponent(self):
        self.check(CVE.setComponent, CVE.getComponent, [
            [None, NoneInputError, None],
            ['', NoneInputError, None],

            ['A', None, 'A'],
            ['B', None, 'B'],
            ['c', None, 'C'],
            ['b', None, 'B'],
        ])
        self.assertEqual(CVE.getAllComponents(), {'A','B','C'})


if __name__ == "__main__":
    unittest.main()
